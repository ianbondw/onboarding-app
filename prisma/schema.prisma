// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Identity & contact
  firstName          String
  lastName           String
  email              String   @unique
  phone              String?
  dateOfBirth        DateTime?
  addressLine1       String?
  addressLine2       String?
  city               String?
  state              String?
  postalCode         String?
  country            String?  @default("US")
  citizenship        String?  @default("US")

  // Sensitive (encrypted)
  // LEGACY (kept for safety; not used going forward)
  ssnCipher          Bytes?
  ssnIv              Bytes?

  // NEW packed AES-GCM fields: iv(12) | ciphertext | tag(16)
  ssnEnc             Bytes?
  dobEnc             Bytes?

  // Employment & income
  employmentStatus   String?   // employed | self_employed | student | retired | unemployed
  employerName       String?
  annualIncomeBand   String?   // <50k | 50-100k | 100-250k | 250-500k | 500k+
  sourceOfFunds      String?   // salary | business | inheritance | asset_sale | other

  // Wealth snapshot
  liquidAssetsBand   String?
  illiquidAssetsBand String?
  liabilitiesBand    String?
  netWorthBand       String?

  // Suitability & preferences
  riskTolerance        String?   // conservative | moderate | growth | aggressive
  timeHorizon          String?   // <3y | 3-5y | 5-10y | 10+y
  primaryGoals         String[]  // [retirement, income, growth, education, legacy, tax]
  liquidityNeeds       String?   // none | some | high
  constraints          String[]  // [no_leverage, esg_only]
  investmentExperience String?   // none | basic | intermediate | advanced

  // Existing accounts (light)
  hasIRA             Boolean   @default(false)
  has401k            Boolean   @default(false)
  hasTaxable         Boolean   @default(true)
  hasCrypto          Boolean   @default(false)
  hasRealEstate      Boolean   @default(false)

  // KYC docs (store URLs/paths or provider refs)
  idDocType          String?   // driver_license | passport | other
  idDocUrl           String?
  proofOfAddressUrl  String?

  // Consent & status
  consentAcceptedAt  DateTime?
  onboardingStatus   String    @default("in_progress") // in_progress | verified | declined

  // Advisor tracking (new)
  advisorId          String?   // e.g., token/slug for /onboarding?advisor=<id>
  advisorName        String?
  advisorFirm        String?

  // Intake link token (new)
  intakeToken        String?   @unique

  // Full submission snapshot for audit/analytics (new)
  rawSubmission      Json?

  matches            ProductMatch[]

  @@index([createdAt])
  @@index([advisorId])
}

model ProductMatch {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  client      Client   @relation(fields: [clientId], references: [id])
  clientId    String

  productCode String
  productName String
  rationale   String
  riskBand    String?
}